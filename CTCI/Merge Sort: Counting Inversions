https://www.hackerrank.com/challenges/ctci-merge-sort/problem

/* Solution 1 */
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static long countInversions(int[] A) {
        int[] aux = A.clone();        
        return topDownSplit(A, 0, A.length -1, aux);        
    }
    
    public static long topDownSplit(int[]A, int iBegin, int iEnd, int[] aux){
        long count = 0;
        if (iEnd <= iBegin)
            return 0;
        int iMiddle = (iBegin + iEnd) / 2;
        
        count += topDownSplit(aux, iBegin, iMiddle, A);
        count += topDownSplit(aux, iMiddle+1, iEnd, A);
        count += topDownMerge(A, iBegin, iMiddle, iEnd, aux);
        return count;
    }
    
    public static long topDownMerge(int[] A, int iBegin, int iMiddle, int iEnd, int[] aux){
        long count = 0;
        int i = iBegin, j = iMiddle +1, k = iBegin;        
   
        while(i<=iMiddle && j <=iEnd){            
            if (aux[i] <= aux[j]){
                A[k++] = aux[i++];
            }else{
                count += iMiddle - i + 1;
                A[k++] = aux[j++];
            }
        }
        /* Right side */
        while(j<=iEnd)
            A[k++] = aux[j++];
        
        /* Left side*/
        while(i<=iMiddle)
            A[k++] = aux[i++];
            
        return count;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            int[] arr = new int[n];
            for(int arr_i = 0; arr_i < n; arr_i++){
                arr[arr_i] = in.nextInt();
            }           
            System.out.println(countInversions(arr));
        }
        in.close();
    }
}



/* SOLUTION 2 */

public class Solution {

    static long countInversions(int[] A) {
        int[] aux = A.clone();        
        return topDownSplit(A, 0, A.length -1, aux);        
    }
    
    public static long topDownSplit(int[]A, int iBegin, int iEnd, int[] aux){
        long count = 0;
        if (iEnd <= iBegin)
            return 0;
        int iMiddle = (iBegin + iEnd) / 2;
        
        count += topDownSplit(aux, iBegin, iMiddle, A);
        count += topDownSplit(aux, iMiddle+1, iEnd, A);
        count += topDownMerge(A, iBegin, iMiddle, iEnd, aux);
        return count;
    }
    
    public static long topDownMerge(int[] A, int iBegin, int iMiddle, int iEnd, int[] aux){
        long count = 0;
        int i = iBegin, j = iMiddle +1, k = iBegin;        
   
        while(k<=iEnd){
             if (i <= iMiddle && (j > iEnd || aux[i] <= aux[j])) {
                A[k++] = aux[i++];
            } else {
                A[k++] = aux[j++];
                 if (i <= iMiddle)
                     count+= iMiddle - i + 1;
            }
        }
            
        return count;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            int[] arr = new int[n];
            for(int arr_i = 0; arr_i < n; arr_i++){
                arr[arr_i] = in.nextInt();
            }           
            System.out.println(countInversions(arr));
        }
        in.close();
    }
}
