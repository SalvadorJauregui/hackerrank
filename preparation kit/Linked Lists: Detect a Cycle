https://www.hackerrank.com/challenges/ctci-linked-list-cycle/problem

/* SOLUTION 1 */


/*Detect a cycle in a linked list. Note that the head pointer may be 'null' if the list is empty.

A Node is defined as: 
    class Node {
        int data;
        Node next;
    }
*/

boolean hasCycle(Node head) {

    if (head == null)
        return false;
    
    Node slow = head;
    Node fast = head;
        
    while(fast.next != null && (fast = fast.next.next) !=null ){        
        slow = slow.next; 
        
        if (fast == slow)
            return true;        
    }    
    
    return false;
}



/* SOLUTION 2 */
/*
Detect a cycle in a linked list. Note that the head pointer may be 'null' if the list is empty.

A Node is defined as: 
    class Node {
        int data;
        Node next;
    }
*/

boolean hasCycle(Node head) {

    if (head == null)
        return false;
    
    Node slow = head;
    Node fast = head;
        
    while(fast.next.next !=null ){      
        fast = fast.next.next;    
        slow = slow.next;        
        
        if (fast == slow)
            return true;        
    }    
    
    return false;
}
