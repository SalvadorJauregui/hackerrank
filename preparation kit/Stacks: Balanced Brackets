https://www.hackerrank.com/challenges/ctci-balanced-brackets/problem


/* SOLUTION 1 */

public class Solution {
    
    static Stack<Character> st = new Stack<>();
    
    public static boolean openBracket(char bracket){
        if (bracket == '{' || bracket == '[' || bracket == '(')
            return true;
        return false;
    }
    
    public static boolean closeBracket(char bracket){
        if (bracket == '}' || bracket == ']' || bracket == ')')
            return true;
        return false;
    }
    
    public static boolean validateBracket(char close){
        if (st.empty() == true )
            return false;
        char open = st.pop();
        if (open == '{' && close == '}' )
            return true;
        if (open == '[' && close == ']' )
            return true;
        if (open == '(' && close == ')' )
            return true;
        return false;
    }
    
    public static boolean isBalanced(String expression) {
        st.clear();
        for (int i = 0; i < expression.length(); i++){
            if ( true == openBracket(expression.charAt(i)))
                st.add(expression.charAt(i));
            else if (true == closeBracket(expression.charAt(i)))                
                if (false == validateBracket(expression.charAt(i)))
                    return false;            
        }
        return (st.empty() == true ? true : false);
    }
  
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for (int a0 = 0; a0 < t; a0++) {
            String expression = in.next();
            System.out.println( (isBalanced(expression)) ? "YES" : "NO" );
        }
    }
}


/* SOLUTION 2: TOKENS */
https://www.hackerrank.com/challenges/ctci-balanced-brackets/submissions/code/67267322

public class Solution {
    static char[][] BRACKETS = { {'{','}'}, {'[',']'}, {'(',')'} };    
    static Stack<Character> st = new Stack<>();
    
    public static boolean openBracket(char _bracket){
        for (char[] bracket : BRACKETS)
            if (bracket[0] == _bracket)
                return true;
        return false;
    }
    
    public static boolean closeBracket(char _bracket){
        for(char[] bracket : BRACKETS)
            if (bracket[1] == _bracket)
                return true;
        return false;
    }
    
    public static boolean validateBracket(char close){
        if (st.empty() == true )
            return false;
        
        char open = st.pop();
        for (char[] bracket : BRACKETS)
            if (open == bracket[0] && close == bracket[1])
                return true;        
        return false;
    }
    
    public static boolean isBalanced(String expression) {
        st.clear();
        for (int i = 0; i < expression.length(); i++){
            if ( true == openBracket(expression.charAt(i)))
                st.add(expression.charAt(i));
            else if (true == closeBracket(expression.charAt(i)))                
                if (false == validateBracket(expression.charAt(i)))
                    return false;            
        }
        return (st.empty() == true ? true : false);
    }
  
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for (int a0 = 0; a0 < t; a0++) {
            String expression = in.next();
            System.out.println( (isBalanced(expression)) ? "YES" : "NO" );
        }
    }
}



/* SOLUTION 3: HASH MAP */
https://www.hackerrank.com/challenges/ctci-balanced-brackets/submissions/code/67279246

public class Solution {
    static HashMap<Character,Character> map;    
    static Stack<Character> st = new Stack<>();
    
    public static void createMap(){
       map  = new HashMap<>();
       map.put('}','{');
       map.put(']','[');
       map.put(')','(');
   }
    
    public static boolean isBalanced(String expression) {
        st.clear();
        char bracket;
        for (int i = 0; i < expression.length(); i++){
            bracket = expression.charAt(i);
            if ( true == map.containsValue(bracket))
                st.add(bracket);
            else if (true == map.containsKey(bracket)){
                if (st.isEmpty()==true)
                    return false;                
                if ( map.get(bracket) != st.pop())
                    return false;            
            }
        }        
        return (st.empty() == true ? true : false);
    }
  
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        createMap();        
        for (int a0 = 0; a0 < t; a0++) {
            String expression = in.next();
            System.out.println( (isBalanced(expression)) ? "YES" : "NO" );
        }
    }
}
